@model CoolBooks_NinjaExperts.ViewModels.CreateBookViewModel

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Create</h1>

<h4>Books</h4>
<hr />
<div class="row">
    <div>
         <form asp-action="Create" enctype="multipart/form-data" class="d-flex justify-content-between">
         <div class="col-md-5">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Book.Title" class="control-label"></label>
                <input asp-for="Book.Title" class="form-control" />
                <span asp-validation-for="Book.Title" class="text-danger"></span>
            </div>
                <div class="form-group">
                    <label asp-for="Book.Authors" class="control-label"></label>
                    <div class="input-group mb-3">
                        <input type="text" name="Authors[0]" class="form-control m-input" placeholder="Enter Authors full name..." autocomplete="off">
                        <span asp-validation-for="Book.Authors" class="text-danger"></span>
                        <button id="addRow" type="button" class="btn btn-info">+</button>
                    </div>
                <div id="newRow"></div>
             </div>
                  <div class="form-group col-sm-8">
                    <label for="myMultiselect">Genres</label>
                    <div id="myMultiselect" class="multiselect">
                      <div id="mySelectLabel" class="selectBox" onclick="toggleCheckboxArea()">
                        <select class="form-select">
                          <option>somevalue</option>
                        </select>
                        <div class="overSelect"></div>
                      </div>
                      <div id="mySelectOptions">
                          @for(int i = 0; i < Model.ListGenres.Count; i++) // syns detta?
                            {
                                <input type="hidden" asp-for="@Model.ListGenres[i].Genres.Id"/>
                                <input type="hidden" asp-for="@Model.ListGenres[i].Genres.Name"/>
                                <label><input type="checkbox" Id= "@Model.ListGenres[i].Genres.Name" asp-for="@Model.ListGenres[i].IsSelected" onchange="checkboxStatusChange()"/> @Model.ListGenres[i].Genres.Name</label>
                                
                            }
                      </div>
                    </div>
                </div>
                <div class="form-group">
                <label asp-for="Book.BookSeries" class="control-label"></label>
                <input asp-for="Book.BookSeries" class="form-control" />
                <span asp-validation-for="Book.BookSeries" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Book.ISBN" class="control-label"></label>
                <input asp-for="Book.ISBN" class="form-control" />
                <span asp-validation-for="Book.ISBN" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Book.Published" class="control-label"></label>
                <input asp-for="Book.Published" class="form-control" type="date" min="1000" max="@DateTime.Now" tabindex="1"/>
                <span asp-validation-for="Book.Published" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Book.Image" class="control-label"></label>
                <input type="file" id="file1" name="file1" multiple="multiple" class="form-control"/>
                <span asp-validation-for="Book.Image" class="text-danger"></span>
            </div>
            <div class="form-group mt-1">
                <input type="submit" value="  Create  " class="btn btn-success btn-lg"/>
            </div>
        </div>

        <div style="width:25px;"></div>

        <div class="col-lg">
            <div class="form-group ">
                <label asp-for="Book.Description" class="control-label"></label>
                <textarea id="desc-area" asp-for="Book.Description" class="form-control row-cols-6" rows="15" cols="75" maxlength="500"></textarea> @*style="resize:none;"*@
                <span id="count_message" asp-validation-for="Book.Description" class="text-danger"></span>
                <div id="chars-remaining" style="text-align:right; font-weight:bold;">500 characters remaining</div>
            </div>
       </div>
            </form>
    </div>
                
    </div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

 <script type="text/javascript">
        // add row
            var count = 1;
        $("#addRow").click(function () {
            var html = '';
            html += '<div id="inputFormRow">';
            html += '<div class="input-group mb-3">';
            html += '<input type="text" name="Authors[' + count +  ']" class="form-control m-input" placeholder="Author ' + (count+1) +  '" autocomplete="off">';
            html += '<span asp-validation-for="Authors" class="text-danger"></span>';
            html += '<div class="input-group-append">';
            html += '<button id="removeRow" type="button" class="btn btn-danger">X</button>';
            html += '</div>';
            html += '</div>';
            count++;


            $('#newRow').append(html);
        });

        // remove row
        $(document).on('click', '#removeRow', function () {
            $(this).closest('#inputFormRow').remove();
            count--;
        });

// ------------------------------------------------------------------------------------- GENRES

  window.onload = (event) => {
  initMultiselect();
};

function initMultiselect() {
  checkboxStatusChange();

  document.addEventListener("click", function(evt) {
    var flyoutElement = document.getElementById('myMultiselect'),
      targetElement = evt.target; // clicked element

    do {
      if (targetElement == flyoutElement) {
        // This is a click inside. Do nothing, just return.
        //console.log('click inside');
        return;
      }

      // Go up the DOM
      targetElement = targetElement.parentNode;
    } while (targetElement);

    // This is a click outside.
    toggleCheckboxArea(true);
    //console.log('click outside');
  });
}
function checkboxStatusChange() {
  var multiselect = document.getElementById("mySelectLabel");
  var multiselectOption = multiselect.getElementsByTagName('option')[0];

  var values = [];
  var checkboxes = document.getElementById("mySelectOptions");
  var checkedCheckboxes = checkboxes.querySelectorAll('input[type=checkbox]:checked');

  for (const item of checkedCheckboxes) {
    var checkboxValue = item.getAttribute('Id');
    values.push(checkboxValue);
  }

  var dropdownValue = "Select Genre(s)";
  if (values.length > 0) {
    dropdownValue = values.join(', ');
  }

  multiselectOption.innerText = dropdownValue;
}

function toggleCheckboxArea(onlyHide = false) {
  var checkboxes = document.getElementById("mySelectOptions");
  var displayValue = checkboxes.style.display;

  if (displayValue != "block") {
    if (onlyHide == false) {
      checkboxes.style.display = "block";
    }
  } else {
    checkboxes.style.display = "none";
  }
}

//Books/Create - Description character counter
const descArea = document.getElementById('desc-area');
const charsRemaining = document.getElementById('chars-remaining');
const MAX_CHARS = 500;
descArea.addEventListener('input', () =>
{
    const remaining = MAX_CHARS - descArea.value.length;
    const color = remaining < MAX_CHARS * 0.1 ? 'red' : null;
    charsRemaining.textContent = remaining + ' characters remaining';
    charsRemaining.style.color = color;
})
      


</script>

